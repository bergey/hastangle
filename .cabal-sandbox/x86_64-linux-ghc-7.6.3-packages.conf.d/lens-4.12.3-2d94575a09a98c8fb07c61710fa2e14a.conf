name: lens
version: 4.12.3
id: lens-4.12.3-2d94575a09a98c8fb07c61710fa2e14a
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.Deque Control.Lens.Internal.Exception
                 Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
                 Control.Lens.Internal.Fold Control.Lens.Internal.Getter
                 Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
                 Control.Lens.Internal.Iso Control.Lens.Internal.Level
                 Control.Lens.Internal.List Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Review
                 Control.Lens.Internal.Setter Control.Lens.Internal.TH
                 Control.Lens.Internal.Zoom Control.Lens.Iso Control.Lens.Lens
                 Control.Lens.Level Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Parallel.Strategies.Lens Control.Seq.Lens Data.Array.Lens
                 Data.Bits.Lens Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
                 System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
                 Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/tim/devel/haskell/hastangle/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/lens-4.12.3
library-dirs: /home/tim/devel/haskell/hastangle/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/lens-4.12.3
hs-libraries: HSlens-4.12.3
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.4.0.1-3b78425c10ff2dad7acf7e8c8ae014c3
         base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57
         base-orphans-0.4.1-af01c0b99f9e3b2f5ac89c38bd417f1d
         bifunctors-5-6f75e74740f7f6545061378b3dae5b40
         bytestring-0.10.0.2-4f93248f75667c2c3321a7a6761b576f
         comonad-4.2.7.2-d1eb3a76f0594911f158e412781b312e
         containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
         contravariant-1.3.2-e67afc095e360405345a1de43432ede7
         distributive-0.4.4-690a7a7f117e1517182889d84aac9919
         exceptions-0.8.0.2-8ff9b7b7a2bf55e51f447816dc3daeff
         filepath-1.3.0.1-b12cbe18566fe1532a1fda4c85e31cbe
         free-4.12.1-49518d47f5928a7b2d06c9329db2c9e9
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.2.3.3-c4436ae2bb928be423d020bc45a37a8a
         kan-extensions-4.2.2-4a301850fdcd84afa9d1fc9be443b686
         mtl-2.2.1-b1605ab44062011ccc4453f773fb3c3d
         parallel-3.2.0.6-40039fd70e66b123f98063d7026c8c1c
         profunctors-5.1.1-a385c60b60f4ea84f9013ff51b518173
         reflection-2-e72b08fd9f660d37f976d32b723b396d
         semigroupoids-5.0.0.2-f584bebb8193b29480b347a95700177b
         semigroups-0.16.2.2-c82748a16b5ce65cf5ebe8b74a955212
         tagged-0.8.1-3ab9d5f7a2f112a7df94b6cf6cc2afeb
         template-haskell-2.8.0.0-a3012803fde1dc362e555b35a1a78e6d
         text-1.2.1.3-755a30640533aa2bfed36fb8ddc60535
         transformers-0.4.3.0-4903e7a74ae23a3d32370cc4e06dbe99
         transformers-compat-0.4.0.4-dcef4e1eeab8de73981ca7a7147f19d8
         unordered-containers-0.2.5.1-ef7ffd994912462172803eb02754d204
         vector-0.11.0.0-5121ed4982fe59d38f44088429af7a84
         void-0.7-be9e069613ba304e940b6e594211e49e
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/tim/devel/haskell/hastangle/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/lens-4.12.3/html/lens.haddock
haddock-html: /home/tim/devel/haskell/hastangle/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/lens-4.12.3/html
